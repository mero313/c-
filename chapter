EXERCISE

2.1 Suppose you’re building an app to keep track of your finances.
Every day, you write down everything you spent money on. At the
end of the month, you review your expenses and sum up how much
you spent. So, you have lots of inserts and a few reads. Should you
use an array or a list? 


// Use a list for tracking daily expenses due to its dynamic nature, ease of use, and overall flexibility 
Avoid arrays unless you have specific constraints or requirements that necessitate their use, which is uncommon for this type of application

2.2 Suppose you’re building an app for restaurants to take customer
orders. Your app needs to store a list of orders. Servers keep adding
orders to this list, and chefs take orders off the list and make them.
It’s an order queue: servers add orders to the back of the queue, and
the chef takes the first order off the queue and cooks it
Would you use an array or a linked list to implement this queue?
(Hint: Linked lists are good for inserts/deletes, and arrays are good
for random access. Which one are you going to be doing here?)

// you should use a linked list to implement this queue becuase u can adding and removing orders easily.


2.3 Let’s run a thought experiment. Suppose Facebook keeps a list of
usernames. When someone tries to log in to Facebook, a search is
done for their username. If their name is in the list of usernames,
they can log in. People log in to Facebook pretty often, so there are
a lot of searches through this list of usernames. Suppose Facebook
uses binary search to search the list. Binary search needs random
access—you need to be able to get to the middle of the list of
usernames instantly. Knowing this, would you implement the list
as an array or a linked list? 
// You should use an array because binary search needs random access, which is more efficient with arrays.

2.4 People sign up for Facebook pretty often, too. Suppose you decided
to use an array to store the list of users. What are the downsides
of an array for inserts? In particular, suppose you’re using binary
search to search for logins. What happens when you add new users
to an array? 
// High insertion costs due to element shifting , Overhead of resizing the array when capacity is reached ,Maintaining a sorted order complicates insertions further.


2.5 In reality, Facebook uses neither an array nor a linked list to store
user information. Let’s consider a hybrid data structure: an array
of linked lists. You have an array with 26 slots. Each slot points to a
linked list. For example, the first slot in the array points to a linked
list containing all the usernames starting with a. The second slot
points to a linked list containing all the usernames starting with b,
and so on

// the hybrid data structure (an array of linked lists) to arrays and linked lists for searching and inserting, without delving into Big O notations, focusing on practical performance considerations.
The hybrid data structure leverages the strengths of both arrays (quick access) and linked lists (efficient insertions and deletions) to provide a balanced approach, making it a practical choice for scenarios involving frequent insertions and searches based on the first character of usernames.